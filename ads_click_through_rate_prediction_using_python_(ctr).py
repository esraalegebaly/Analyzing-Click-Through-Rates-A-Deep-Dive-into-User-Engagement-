# -*- coding: utf-8 -*-
"""Ads Click-Through Rate Prediction Using Python (CTR).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hoTttwcAe0AC68T40TsOCpvVs8WHeDcz
"""

import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
import plotly.io as pio
import numpy as np
pio.templates.default = "plotly_white"

data = pd.read_csv("ad_10000records.csv")
print(data.head())

data["Clicked on Ad"] = data["Clicked on Ad"].map({0: "No",
                               1: "Yes"})

import plotly.express as px

# Calculate average daily time spent on site for each clicked status
avg_time_spent = data.groupby("Clicked on Ad")["Daily Time Spent on Site"].mean().reset_index()

fig = px.bar(avg_time_spent,
              x="Clicked on Ad",
              y="Daily Time Spent on Site",
              title="Average Time Spent on Site by Click Status",
              color="Clicked on Ad",
              color_discrete_map={1: 'blue',  # Clicked
                                  0: 'red'})  # Not Clicked

fig.update_xaxes(title_text="Clicked on Ad")
fig.update_yaxes(title_text="Average Daily Time Spent on Site")
fig.show()

import pandas as pd
import plotly.express as px

# Assuming 'data' is your DataFrame containing the dataset

# Create bins for Daily Internet Usage
bins = [0, 40, 80, 120, 160, 200, 240]  # Example bins
labels = ['0-40', '41-80', '81-120', '121-160', '161-200', '201-240']

# Create a new column for binned Daily Internet Usage
data['Internet Usage Binned'] = pd.cut(data['Daily Internet Usage'], bins=bins, labels=labels)

# Count the number of clicks and non-clicks in each bin
ctr_data = data.groupby(['Internet Usage Binned', 'Clicked on Ad']).size().reset_index(name='Count')

# Create the bar plot
fig = px.bar(ctr_data,
             x='Internet Usage Binned',
             y='Count',
             color='Clicked on Ad',
             title='Click Through Rate Based on Daily Internet Usage',
             color_discrete_map={1: 'blue', 0: 'red'},
             barmode='group')  # Group bars for better comparison

# Show the plot
fig.show()

import plotly.express as px

# Assuming 'data' is your DataFrame containing the dataset
fig = px.histogram(data,
                   x="Age",
                   color="Clicked on Ad",
                   title="Click Through Rate Based on Age",
                   color_discrete_map={1: 'blue',  # Clicked
                                       0: 'red'})  # Not Clicked

fig.show()

fig = px.box(data,
                 x="Area Income",
                 color="Clicked on Ad",
                 title="Click Through Rate based on Income",
                 color_discrete_map={'Yes':'blue',
                                     'No':'red'})

import plotly.express as px
import pandas as pd

# Assuming 'data' is your DataFrame containing the dataset
# Create a new DataFrame to count clicks and no-clicks for each income level
heatmap_data = data.groupby(['Area Income', 'Clicked on Ad']).size().reset_index(name='Count')

# Create a heatmap
fig = px.density_heatmap(
    heatmap_data,
    x='Area Income',
    y='Clicked on Ad',
    z='Count',
    title='Heatmap of Click Through Rate Based on Area Income',
    color_continuous_scale='Viridis',
    labels={'Clicked on Ad': 'Clicked on Ad (1=Yes, 0=No)', 'Count': 'Count of Users'}
)

fig.show()

data["Clicked on Ad"].value_counts()

click_through_rate = 4917 / 10000 * 100
print(click_through_rate)

data["Gender"] = data["Gender"].map({"Male": 1,
                               "Female": 0})

x=data.iloc[:,0:7]
x=x.drop(['Ad Topic Line','City'],axis=1)
y=data.iloc[:,9]

from sklearn.model_selection import train_test_split
xtrain,xtest,ytrain,ytest=train_test_split(x,y,
                                           test_size=0.2,
                                           random_state=4)

from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier()
model.fit(x, y)

from sklearn.metrics import accuracy_score

# Generate predictions
y_pred = model.predict(xtest)

# Calculate and print accuracy
print(accuracy_score(ytest, y_pred))

print("Ads Click Through Rate Prediction : ")
a = float(input("Daily Time Spent on Site: "))
b = float(input("Age: "))
c = float(input("Area Income: "))
d = float(input("Daily Internet Usage: "))
e = input("Gender (Male = 1, Female = 0) : ")

features = np.array([[a, b, c, d, e]])
print("Will the user click on ad = ", model.predict(features))

